;; Standard library for cebf
;; by ComputerElite 2024
;;
;; The standard library contains macros which are useful for writing programs in cebf.
;; The compiler automatically reserves space for the standard library and you won't have to worry about overwriting any of it's variables when using it.

#include math.cebf
#include bash.cebf
#include int.cebf

;; jump if equal
;; jmp.eq <addressA> <addressB> <label>
macro jmp.eq 3
;; subtract both values from each other
sub $0 $1 $cebf_stdlib_0 
;; if the result is 0, the values are equal and thus we jump
jmp.ez $cebf_stdlib_0 $2
macroend





;; compare two strings
;; string.compare <addressA> <addressB> <label>
macro string.compare 3

;; create pointers to the strings
set.a $cebf_stdlib_1 $0
set.a $cebf_stdlib_2 $1
jmp cebf_stdlib_string_compare_loop



;; compare the strings character for character
:cebf_stdlib_string_compare_pre_loop
;; move to next characters
inc $cebf_stdlib_1
inc $cebf_stdlib_2

:cebf_stdlib_string_compare_loop
out.r *$cebf_stdlib_1
out.r *$cebf_stdlib_2
;; if both characters are equal check what they are
jmp.eq *$cebf_stdlib_1 *$cebf_stdlib_2 cebf_stdlib_string_compare_compare_succeeded
;; now check if any of the strings are null
jmp cebf_stdlib_string_compare_compare_failed

:cebf_stdlib_string_compare_compare_succeeded
;; if the first string is not null, we haven't reached the end of the string yet
jmp.nz *$cebf_stdlib_1 cebf_stdlib_string_compare_pre_loop
;; string end reached and they're the same. Nice!!
jmp $2

:cebf_stdlib_string_compare_compare_failed

macroend

;; Stores the length of a string in a variable
;; string.get_length <length_store_address> <string_address>
macro string.get_length 2
set.n $0 0
set.a $cebf_stdlib_0 $1

:cebf_stdlib_string_get_length__loop
jmp.ez *$cebf_stdlib_0 cebf_stdlib_string_get_length__end
inc $0
inc $cebf_stdlib_0

jmp cebf_stdlib_string_get_length__loop

:cebf_stdlib_string_get_length__end

macroend

;; Converts a string into an int
;; string.to_int <string_address> <int_store_address>
macro string.to_int 2
;; get length of string
string.get_length $cebf_stdlib_2 $0

set.a $cebf_stdlib_3 $0 
set.n $1 0
dec $cebf_stdlib_2
add $cebf_stdlib_3 $cebf_stdlib_2 $cebf_stdlib_3 ;; pointer in 3 now points to last char of string aka least significant

set.n $cebf_stdlib_5 0 ;; power of 10
set.n $cebf_stdlib_6 10 ;; base 10
set.n $cebf_stdlib_7 48 ;; ascii to digit conversion constant

:cebf_stdlib_string_to_int__loop
jmp.ez $cebf_stdlib_2 cebf_stdlib_string_to_int__end

;; instead of writing back to the original address we could just use another stdlib address but I decided to safe addresses here.

sub $cebf_stdlib_7 *$cebf_stdlib_3 *$cebf_stdlib_3 ;; convert ascii to digit

math.power $cebf_stdlib_6 $cebf_stdlib_5 $cebf_stdlib_4 ;; calculate power of 10

mpl $cebf_stdlib_4 *$cebf_stdlib_3 $cebf_stdlib_4 ;; multiply digit with power of 10

add *$cebf_stdlib_3 $cebf_stdlib_7 *$cebf_stdlib_3 ;; restore damage we did to original memory cell
add $cebf_stdlib_4 $1 $1 ;; add to result
dec $cebf_stdlib_3 ;; move to next character
dec $cebf_stdlib_2 ;; decrement remaining string length
inc $cebf_stdlib_5 ;; increase power of 10
jmp cebf_stdlib_string_to_int__loop

:cebf_stdlib_string_to_int__end

macroend

;; Outputs an int at an address
;; out.int <address>
macro out.int 1
set.n $cebf_stdlib_1 48
cpy $0 $cebf_stdlib_0
add $cebf_stdlib_1 $cebf_stdlib_0 $cebf_stdlib_0
out.r $cebf_stdlib_0
macroend

;; Slow pure CEBF implementation for in.line
;; in.line_slow <address>
macro in.line_slow 1
all cebf_stdlib_in_line__input_pointer 1
all cebf_stdlib_in_line__new_line 1

set.a $cebf_stdlib_in_line__input_pointer $0
set.n $cebf_stdlib_in_line__new_line 10
:cebf_stdlib_in_line__input_loop
in.c *$cebf_stdlib_in_line__input_pointer
jmp.eq *$cebf_stdlib_in_line__input_pointer $cebf_stdlib_in_line__new_line cebf_stdlib_in_line__done
inc $cebf_stdlib_in_line__input_pointer
jmp cebf_stdlib_in_line__input_loop

:cebf_stdlib_in_line__done
fre cebf_stdlib_in_line__input_pointer
fre cebf_stdlib_in_line__new_line
macroend

;; reads a line into the given address, null terminated
;; in.line <address>
macro in.line 1
raw $0 [-]+[,>[-]>[-]<<[->+>+<<]>[-<+>]+>----------]<[-<<]>
macroend


#include math.cebf
;; Converts n int to a string
;; int.to_string <int> <string_address>
macro int8.to_string 2
all cebf_stdlib_int8_to_string__tmp_int 1
cpy $0 $cebf_stdlib_int8_to_string__tmp_int

all cebf_stdlib_int8_to_string__current_power_of_ten 1
set.n $cebf_stdlib_int8_to_string__current_power_of_ten 2

all cebf_stdlib_int8_to_string__base 1
set.n $cebf_stdlib_int8_to_string__base 10

all cebf_stdlib_int8_to_string__current_digit_value 1

all cebf_stdlib_int8_to_string__str_pointer 1
set.a $cebf_stdlib_int8_to_string__str_pointer $1

all cebf_stdlib_int8_to_string__forty_eight 1
set.n $cebf_stdlib_int8_to_string__forty_eight 48

:loop
math.power $cebf_stdlib_int8_to_string__base $cebf_stdlib_int8_to_string__current_power_of_ten $cebf_stdlib_int8_to_string__current_digit_value
math.divmod $cebf_stdlib_int8_to_string__tmp_int $cebf_stdlib_int8_to_string__current_digit_value $cebf_stdlib_int8_to_string__current_digit_value $cebf_stdlib_int8_to_string__tmp_int

add $cebf_stdlib_int8_to_string__forty_eight $cebf_stdlib_int8_to_string__current_digit_value $cebf_stdlib_int8_to_string__current_digit_value
cpy $cebf_stdlib_int8_to_string__current_digit_value *$cebf_stdlib_int8_to_string__str_pointer
inc $cebf_stdlib_int8_to_string__str_pointer
jmp.ez $cebf_stdlib_int8_to_string__current_power_of_ten cebf_stdlib_int_to_string__end
dec $cebf_stdlib_int8_to_string__current_power_of_ten
jmp loop


:cebf_stdlib_int_to_string__end

fre cebf_stdlib_int8_to_string__tmp_int
fre cebf_stdlib_int8_to_string__current_power_of_ten
fre cebf_stdlib_int8_to_string__base
fre cebf_stdlib_int8_to_string__current_digit_value
fre cebf_stdlib_int8_to_string__str_pointer
fre cebf_stdlib_int8_to_string__forty_eight
macroend

macro 