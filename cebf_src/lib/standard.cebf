;; Standard library for cebf
;; by ComputerElite 2024
;;
;; The standard library contains macros which are useful for writing programs in cebf.
;; The compiler automatically reserves space for the standard library and you won't have to worry about overwriting any of it's variables when using it.

;; memory layout:
;; $cebf_stdlib_0: jmp.eq
;; $cebf_stdlib_1: string.compare
;; $cebf_stdlib_2: string.compare

;; jump if equal
;; jmp.eq <addressA> <addressB> <label>
macro jmp.eq 3
;; subtract both values from each other
sub $0 $1 $cebf_stdlib_0 
;; if the result is 0, the values are equal and thus we jump
jmp.ez $cebf_stdlib_0 $2
macroend




;; compare two strings
;; string.compare <addressA> <addressB> <label>
macro string.compare 3

;; create pointers to the strings
set.a $cebf_stdlib_1 $0
set.a $cebf_stdlib_2 $1
jmp cebf_stdlib_string_compare_loop



;; compare the strings character for character
:cebf_stdlib_string_compare_pre_loop
;; move to next characters
inc $cebf_stdlib_1
inc $cebf_stdlib_2

:cebf_stdlib_string_compare_loop
out.r *$cebf_stdlib_1
out.r *$cebf_stdlib_2
;; if both characters are equal check what they are
jmp.eq *$cebf_stdlib_1 *$cebf_stdlib_2 cebf_stdlib_string_compare_compare_succeeded
;; now check if any of the strings are null
jmp cebf_stdlib_string_compare_compare_failed

:cebf_stdlib_string_compare_compare_succeeded
;; if the first string is not null, we haven't reached the end of the string yet
jmp.nz *$cebf_stdlib_1 cebf_stdlib_string_compare_pre_loop
;; string end reached and they're the same. Nice!!
jmp $2

:cebf_stdlib_string_compare_compare_failed

macroend

;; Stores the length of a string in a variable
;; string.length <length_store_address> <string_address>
macro string.get_length 2
set.n $0 0
set.a $cebf_stdlib_1 $1

:cebf_stdlib_string_get_length__loop
jmp.ez *$cebf_stdlib_1 cebf_stdlib_string_get_length__end
inc $0
inc $cebf_stdlib_1

jmp cebf_stdlib_string_get_length__loop

:cebf_stdlib_string_get_length__end

macroend

;; Usage
macro string.to_int 1
macroend