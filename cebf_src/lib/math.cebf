;; Function to calculate the power of a number
;; math.power <base_value_address> <power_value_address> <result_address>
macro math.power 3
set.n $2 1
cpy $1 $cebf_stdlib_1

:cebf_stdlib_math_power__loop
jmp.ez $cebf_stdlib_1 cebf_stdlib_math_power__end
mpl $0 $2 $2
dec $cebf_stdlib_1
jmp cebf_stdlib_math_power__loop

:cebf_stdlib_math_power__end
macroend


;; From https://esolangs.org/wiki/brainfuck_algorithms#Modulo
;; Computes the result of a modulo operation
;; math.modulo <divident_address> <divisor_address> <result_address>
macro math.modulo 3
cpy $0 $cebf_compiler_1
cpy $1 $cebf_compiler_2
raw $cebf_compiler_0 [-]>>>[-]>[-]>[-]<<<<[>->+<[>]>[<+>-]<<[<]>-]<
cpy $cebf_compiler_3 $2
macroend



;; Computes the result of a division
;; math.divide_without_remainder <divident_address> <divisor_address> <div_result_address> <mod_result_address>
macro math.divmod 4
cpy $0 $cebf_compiler_0
cpy $1 $cebf_compiler_1
raw $cebf_compiler_0 >>[-]>[-]<<<[->[->+>>]>[<<+>>[-<+>]>+>>]<<<<<]>[>>>]>[[-<+>]>+>>]<<<<<
cpy $cebf_compiler_3 $2
cpy $cebf_compiler_2 $3
macroend



;; Computes the result of a division
;; math.divide_without_remainder <divident_address> <divisor_address> <result_address>
macro math.divide_without_remainder 3
cpy $0 $cebf_compiler_0
cpy $1 $cebf_compiler_1
raw $cebf_compiler_2 [-]>[-]>[-]<<<<[>[->+>+<<]>>[-<<+>>]<[-<<->>]>>+<<<<]>>
cpy $cebf_compiler_4 $2
macroend
