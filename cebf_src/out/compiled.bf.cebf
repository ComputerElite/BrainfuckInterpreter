;; Bash library for cebf
;; by ComputerElite 2024
;;
;; The bash library contains macros for interacting with the bash shell
;; Appends a command to the cebf interpreter bash command buffer
;; bashðŸ’©set_command ðŸ’©stringðŸ’©
;;macro bash.set_command 1
;;;; save current interpreter output mode for restoring later
;;cpy $cebf_interpreter_0 $cebf_stdlib_0
;;set.n $cebf_interpreter_0 1
;;wrt.s $0
;;cpy $cebf_stdlib_0 $cebf_interpreter_0
;;macroend
;; Starts the bash command in the bash buffer of the cebf interpreterðŸ’© out/in streams will be redirected to started command
;; bashðŸ’©start_command_in_buffer
;;macro bash.start_command_in_buffer 0
;;set.n $cebf_interpreter_0 2
;;wrt.n
;;macroend
;; KIlls the process running in the cebf interpreter
;; bashðŸ’©kill_process
;;macro bash.kill_process 0
;;set.n $cebf_interpreter_0 3
;;wrt.n
;;macroend
;; Reads stdout of the currently running bash process until the end of streamðŸ’© Output will be null terminated
;; bashðŸ’©read_stdout_to_end ðŸ’©start_addressðŸ’©
;;macro bash.read_stdout_to_end 1
;;set.a $0 $cebf_stdlib_0
;;;; check if process is running
;;set.n $cebf_interpreter_0 3
;;in.c $cebf_stdlib_1
;;jmp.ez $cebf_stdlib_1 cebf_stdlib_bash_read_stdout_to_end__end
;;set.n $cebf_interpreter_0 0
;;:cebf_stdlib_bash_read_stdout_to_end__loop
;;;; read stdout
;;in.c *$cebf_stdlib_0
;;inc $cebf_stdlib_0
;;jmp.nz $cebf_interpreter_1 cebf_stdlib_bash_read_stdout_to_end__exit
;;jmp cebf_stdlib_bash_read_stdout_to_end__loop
;;:cebf_stdlib_bash_read_stdout_to_end__end
;;;; null terminate string
;;set.n *$cebf_stdlib_0 0
;;:cebf_stdlib_bash_read_stdout_to_end__exit
;;macroend
;; Executes a bash command and kills it once the end of the output streaðŸ’© was reachedðŸ’© Output stream is discarded
;; bashðŸ’©run_command_and_kill_at_end_of_file ðŸ’©commandðŸ’©
;;macro bash.run_command_and_kill_at_end_of_file 1
;;bash.set_command $0
;;bash.start_command_in_buffer
;;;; check if process is running
;;set.n $cebf_interpreter_0 3
;;in.c $cebf_stdlib_1
;;jmp.ez $cebf_stdlib_1 cebf_stdlib_bash_run_command_and_kill_at_end_of_file__exit
;;set.n $cebf_interpreter_0 0
;;:cebf_stdlib_bash_run_command_and_kill_at_end_of_file__loop
;;;; read stdout
;;in.c $cebf_stdlib_1
;;inc $cebf_stdlib_0
;;jmp.nz $cebf_interpreter_1 cebf_stdlib_bash_run_command_and_kill_at_end_of_file__exit
;;jmp cebf_stdlib_bash_run_command_and_kill_at_end_of_file__loop
;;:cebf_stdlib_bash_run_command_and_kill_at_end_of_file__exit
;;macroend
;; Standard library for cebf
;; by ComputerElite 2024
;;
;; The standard library contains macros which are useful for writing programs in cebfðŸ’©
;; The compiler automatically reserves space for the standard library and you won't have to worry about overwriting any of it's variables when using itðŸ’©
;; memory layout:
;; $cebf_stdlib_0: jmpðŸ’©eq
;; $cebf_stdlib_1: stringðŸ’©compare
;; $cebf_stdlib_2: stringðŸ’©compare
;; jump if equal
;; jmpðŸ’©eq ðŸ’©addressAðŸ’© ðŸ’©addressBðŸ’© ðŸ’©labelðŸ’©
;;macro jmp.eq 3
;;;; subtract both values from each other
;;sub $0 $1 $cebf_stdlib_0
;;;; if the result is 0ðŸ’© the values are equal and thus we jump
;;jmp.ez $cebf_stdlib_0 $2
;;macroend
;; compare two strings
;; stringðŸ’©compare ðŸ’©addressAðŸ’© ðŸ’©addressBðŸ’© ðŸ’©labelðŸ’©
;;macro string.compare 3
;;;; create pointers to the strings
;;set.a $cebf_stdlib_1 $0
;;set.a $cebf_stdlib_2 $1
;;jmp cebf_stdlib_string_compare_loop
;;;; compare the strings character for character
;;:cebf_stdlib_string_compare_pre_loop
;;;; move to next characters
;;inc $cebf_stdlib_1
;;inc $cebf_stdlib_2
;;:cebf_stdlib_string_compare_loop
;;out.r *$cebf_stdlib_1
;;out.r *$cebf_stdlib_2
;;;; if both characters are equal check what they are
;;jmp.eq *$cebf_stdlib_1 *$cebf_stdlib_2 cebf_stdlib_string_compare_compare_succeeded
;;;; now check if any of the strings are null
;;jmp cebf_stdlib_string_compare_compare_failed
;;:cebf_stdlib_string_compare_compare_succeeded
;;;; if the first string is not nullðŸ’© we haven't reached the end of the string yet
;;jmp.nz *$cebf_stdlib_1 cebf_stdlib_string_compare_pre_loop
;;;; string end reached and they're the sameðŸ’© Nice!!
;;jmp $2
;;:cebf_stdlib_string_compare_compare_failed
;;macroend
;; Stores the length of a string in a variable
;; stringðŸ’©get_length ðŸ’©length_store_addressðŸ’© ðŸ’©string_addressðŸ’©
;;macro string.get_length 2
;;set.n $0 0
;;set.a $cebf_stdlib_0 $1
;;:cebf_stdlib_string_get_length__loop
;;jmp.ez *$cebf_stdlib_0 cebf_stdlib_string_get_length__end
;;inc $0
;;inc $cebf_stdlib_0
;;jmp cebf_stdlib_string_get_length__loop
;;:cebf_stdlib_string_get_length__end
;;macroend
;; Converts a string into an int
;; stringðŸ’©to_int ðŸ’©string_addressðŸ’© ðŸ’©int_store_addressðŸ’©
;;macro string.to_int 2
;;macroend
;; Outputs an int at an address
;; outðŸ’©int ðŸ’©addressðŸ’©
;;macro out.int 1
;;cpy $0 $cebf_stdlib_0
;;set.n $cebf_stdlib_1 48
;;add $cebf_stdlib_1 $cebf_stdlib_0 $cebf_stdlib_0
;;out.r $cebf_stdlib_0
;;macroend
#produceprecompilecebf
sad 1 string
sad 0 length
set.s $string "fuck this shit"
set.n $length 0
set.a $cebf_stdlib_0 $string
:cebf_stdlib_string_get_length__loop___call_0
jmp.ez *$cebf_stdlib_0 cebf_stdlib_string_get_length__end___call_0
inc $length
inc $cebf_stdlib_0
jmp cebf_stdlib_string_get_length__loop___call_0
:cebf_stdlib_string_get_length__end___call_0
set.n $length 0
set.a $cebf_stdlib_0 $string
:cebf_stdlib_string_get_length__loop___call_1
jmp.ez *$cebf_stdlib_0 cebf_stdlib_string_get_length__end___call_1
inc $length
inc $cebf_stdlib_0
jmp cebf_stdlib_string_get_length__loop___call_1
:cebf_stdlib_string_get_length__end___call_1
cpy $length $cebf_stdlib_0
set.n $cebf_stdlib_1 48
add $cebf_stdlib_1 $cebf_stdlib_0 $cebf_stdlib_0
out.r $cebf_stdlib_0
exit
wrt.s Writing to file
;; save current interpreter output mode for restoring later
cpy $cebf_interpreter_0 $cebf_stdlib_0
set.n $cebf_interpreter_0 1
wrt.s "cat /dev/stdin > file.txt"
cpy $cebf_stdlib_0 $cebf_interpreter_0
set.n $cebf_interpreter_0 2
wrt.n
wrt.s Written by cebf
set.n $cebf_interpreter_0 3
wrt.n
wrt.s Wrote content to file

