;;ğŸ’©commentcode
#seperatestatemachine
;; Standard library for cebf
;; by ComputerElite 2024
;;
;; The standard library contains macros which are useful for writing programs in cebfğŸ’©
;; The compiler automatically reserves space for the standard library and you won't have to worry about overwriting any of it's variables when using itğŸ’©
;; Function to calculate the power of a number
;; mathğŸ’©power ğŸ’©base_value_addressğŸ’© ğŸ’©power_value_addressğŸ’© ğŸ’©result_addressğŸ’©
;;macro math.power 3
;;set.n $2 1
;;cpy $0 $cebf_stdlib_0
;;cpy $1 $cebf_stdlib_1
;;:cebf_stdlib_math_power__loop
;;jmp.ez $cebf_stdlib_1 cebf_stdlib_math_power__end
;;mpl $cebf_stdlib_0 $2 $2
;;dec $cebf_stdlib_1
;;jmp cebf_stdlib_math_power__loop
;;:cebf_stdlib_math_power__end
;;macroend
;; Bash library for cebf
;; by ComputerElite 2024
;;
;; The bash library contains macros for interacting with the bash shell
;; Appends a command to the cebf interpreter bash command buffer
;; bashğŸ’©set_command ğŸ’©stringğŸ’©
;;macro bash.set_command 1
;;;; save current interpreter output mode for restoring later
;;cpy $cebf_interpreter_0 $cebf_stdlib_0
;;set.n $cebf_interpreter_0 1
;;wrt.s $0
;;cpy $cebf_stdlib_0 $cebf_interpreter_0
;;macroend
;; Starts the bash command in the bash buffer of the cebf interpreterğŸ’© out/in streams will be redirected to started command
;; bashğŸ’©start_command_in_buffer
;;macro bash.start_command_in_buffer 0
;;set.n $cebf_interpreter_0 2
;;wrt.n
;;macroend
;; Starts a bash process with the given commandğŸ’© The command must be a literal string and not a varableğŸ’© std_in_content_address is a string variable that is written to stdin of the process once it started
;; bashğŸ’©execute_and_print_entire_output ğŸ’©command_as_stringğŸ’© ğŸ’©std_in_content_addressğŸ’©
;;macro bash.execute_with_stdin_and_print_entire_output 2
;;bash.set_command $0
;;bash.start_command_in_buffer
;;;; check if process is running
;;set.n $cebf_interpreter_0 3
;;in.c $cebf_stdlib_1
;;jmp.ez $cebf_stdlib_1 cebf_stdlib_bash_execute_with_stdin_and_print_entire_output__exit
;;set.n $cebf_interpreter_0 0
;;:cebf_stdlib_bash_execute_with_stdin_and_print_entire_output__loop
;;;; read stdout
;;in.c $cebf_stdlib_0
;;jmp.nz $cebf_interpreter_1 cebf_stdlib_bash_execute_with_stdin_and_print_entire_output__exit
;;out.r $cebf_stdlib_0
;;jmp cebf_stdlib_bash_execute_with_stdin_and_print_entire_output__loop
;;:cebf_stdlib_bash_execute_with_stdin_and_print_entire_output__exit
;;macroend
;; KIlls the process running in the cebf interpreter
;; bashğŸ’©kill_process
;;macro bash.kill_process 0
;;set.n $cebf_interpreter_0 3
;;wrt.n
;;macroend
;; Reads stdout of the currently running bash process until the end of streamğŸ’© Output will be null terminated
;; bashğŸ’©read_stdout_to_end ğŸ’©start_addressğŸ’©
;;macro bash.read_stdout_to_end 1
;;set.a $0 $cebf_stdlib_0
;;;; check if process is running
;;set.n $cebf_interpreter_0 3
;;in.c $cebf_stdlib_1
;;jmp.ez $cebf_stdlib_1 cebf_stdlib_bash_read_stdout_to_end__end
;;set.n $cebf_interpreter_0 0
;;:cebf_stdlib_bash_read_stdout_to_end__loop
;;;; read stdout
;;in.c *$cebf_stdlib_0
;;inc $cebf_stdlib_0
;;jmp.nz $cebf_interpreter_1 cebf_stdlib_bash_read_stdout_to_end__exit
;;jmp cebf_stdlib_bash_read_stdout_to_end__loop
;;:cebf_stdlib_bash_read_stdout_to_end__end
;;;; null terminate string
;;set.n *$cebf_stdlib_0 0
;;:cebf_stdlib_bash_read_stdout_to_end__exit
;;macroend
;; Executes a bash command and kills it once the end of the output streağŸ’© was reachedğŸ’© Output stream is discarded
;; bashğŸ’©run_command_and_kill_at_end_of_file ğŸ’©commandğŸ’©
;;macro bash.run_command_and_kill_at_end_of_file 1
;;bash.set_command $0
;;bash.start_command_in_buffer
;;;; check if process is running
;;set.n $cebf_interpreter_0 3
;;in.c $cebf_stdlib_1
;;jmp.ez $cebf_stdlib_1 cebf_stdlib_bash_run_command_and_kill_at_end_of_file__exit
;;set.n $cebf_interpreter_0 0
;;:cebf_stdlib_bash_run_command_and_kill_at_end_of_file__loop
;;;; read stdout
;;in.c $cebf_stdlib_1
;;inc $cebf_stdlib_0
;;jmp.nz $cebf_interpreter_1 cebf_stdlib_bash_run_command_and_kill_at_end_of_file__exit
;;jmp cebf_stdlib_bash_run_command_and_kill_at_end_of_file__loop
;;:cebf_stdlib_bash_run_command_and_kill_at_end_of_file__exit
;;macroend
;; jump if equal
;; jmpğŸ’©eq ğŸ’©addressAğŸ’© ğŸ’©addressBğŸ’© ğŸ’©labelğŸ’©
;;macro jmp.eq 3
;;;; subtract both values from each other
;;sub $0 $1 $cebf_stdlib_0
;;;; if the result is 0ğŸ’© the values are equal and thus we jump
;;jmp.ez $cebf_stdlib_0 $2
;;macroend
;; compare two strings
;; stringğŸ’©compare ğŸ’©addressAğŸ’© ğŸ’©addressBğŸ’© ğŸ’©labelğŸ’©
;;macro string.compare 3
;;;; create pointers to the strings
;;set.a $cebf_stdlib_1 $0
;;set.a $cebf_stdlib_2 $1
;;jmp cebf_stdlib_string_compare_loop
;;;; compare the strings character for character
;;:cebf_stdlib_string_compare_pre_loop
;;;; move to next characters
;;inc $cebf_stdlib_1
;;inc $cebf_stdlib_2
;;:cebf_stdlib_string_compare_loop
;;out.r *$cebf_stdlib_1
;;out.r *$cebf_stdlib_2
;;;; if both characters are equal check what they are
;;jmp.eq *$cebf_stdlib_1 *$cebf_stdlib_2 cebf_stdlib_string_compare_compare_succeeded
;;;; now check if any of the strings are null
;;jmp cebf_stdlib_string_compare_compare_failed
;;:cebf_stdlib_string_compare_compare_succeeded
;;;; if the first string is not nullğŸ’© we haven't reached the end of the string yet
;;jmp.nz *$cebf_stdlib_1 cebf_stdlib_string_compare_pre_loop
;;;; string end reached and they're the sameğŸ’© Nice!!
;;jmp $2
;;:cebf_stdlib_string_compare_compare_failed
;;macroend
;; Stores the length of a string in a variable
;; stringğŸ’©get_length ğŸ’©length_store_addressğŸ’© ğŸ’©string_addressğŸ’©
;;macro string.get_length 2
;;set.n $0 0
;;set.a $cebf_stdlib_0 $1
;;:cebf_stdlib_string_get_length__loop
;;jmp.ez *$cebf_stdlib_0 cebf_stdlib_string_get_length__end
;;inc $0
;;inc $cebf_stdlib_0
;;jmp cebf_stdlib_string_get_length__loop
;;:cebf_stdlib_string_get_length__end
;;macroend
;; Converts a string into an int
;; stringğŸ’©to_int ğŸ’©string_addressğŸ’© ğŸ’©int_store_addressğŸ’©
;;macro string.to_int 2
;;;; get length of string
;;string.get_length $cebf_stdlib_2 $0
;;set.a $cebf_stdlib_3 $0
;;set.n $1 0
;;dec $cebf_stdlib_2
;;add $cebf_stdlib_3 $cebf_stdlib_2 $cebf_stdlib_3 ;; pointer in 3 now points to last char of string aka least significant
;;set.n $cebf_stdlib_5 0 ;; power of 10
;;set.n $cebf_stdlib_6 10 ;; base 10
;;set.n $cebf_stdlib_7 48 ;; ascii to digit conversion constant
;;:cebf_stdlib_string_to_int__loop
;;jmp.ez $cebf_stdlib_2 cebf_stdlib_string_to_int__end
;;;; instead of writing back to the original address we could just use another stdlib address but I decided to safe addresses hereğŸ’©
;;sub $cebf_stdlib_7 *$cebf_stdlib_3 *$cebf_stdlib_3 ;; convert ascii to digit
;;math.power $cebf_stdlib_6 $cebf_stdlib_5 $cebf_stdlib_4 ;; calculate power of 10
;;mpl $cebf_stdlib_4 *$cebf_stdlib_3 $cebf_stdlib_4 ;; multiply digit with power of 10
;;add *$cebf_stdlib_3 $cebf_stdlib_7 *$cebf_stdlib_3 ;; restore damage we did to original memory cell
;;add $cebf_stdlib_4 $1 $1 ;; add to result
;;dec $cebf_stdlib_3 ;; move to next character
;;dec $cebf_stdlib_2 ;; decrement remaining string length
;;inc $cebf_stdlib_5 ;; increase power of 10
;;jmp cebf_stdlib_string_to_int__loop
;;:cebf_stdlib_string_to_int__end
;;macroend
;; Outputs an int at an address
;; outğŸ’©int ğŸ’©addressğŸ’©
;;macro out.int 1
;;set.n $cebf_stdlib_1 48
;;cpy $0 $cebf_stdlib_0
;;add $cebf_stdlib_1 $cebf_stdlib_0 $cebf_stdlib_0
;;out.r $cebf_stdlib_0
;;macroend
#produceprecompilecebf

cpy $cebf_interpreter_0 $cebf_stdlib_0
set.n $cebf_interpreter_0 1
wrt.s "echo Test"
cpy $cebf_stdlib_0 $cebf_interpreter_0
set.n $cebf_interpreter_0 2
wrt.n

set.n $cebf_interpreter_0 3
in.c $cebf_stdlib_1
jmp.ez $cebf_stdlib_1 cebf_stdlib_bash_execute_with_stdin_and_print_entire_output__exit___call_0
set.n $cebf_interpreter_0 0
:cebf_stdlib_bash_execute_with_stdin_and_print_entire_output__loop___call_0

in.c $cebf_stdlib_0
jmp.nz $cebf_interpreter_1 cebf_stdlib_bash_execute_with_stdin_and_print_entire_output__exit___call_0
out.r $cebf_stdlib_0
jmp cebf_stdlib_bash_execute_with_stdin_and_print_entire_output__loop___call_0
:cebf_stdlib_bash_execute_with_stdin_and_print_entire_output__exit___call_0
sad 2 input
sad 0 input_pointer
sad 1 new_line
;; readline
set.a $input_pointer $input
set.n $new_line 10
:input_loop
in.c *$input_pointer

sub *$input_pointer $new_line $cebf_stdlib_0

jmp.ez $cebf_stdlib_0 done
inc $input_pointer
jmp input_loop
:done
;; null terminate string and make sure to replace carriage return
wrt.s output:
out.n $input