#seperatestatemachine
#produceprecompilecebf
#cellsize 65535
#minify
;;ğŸ’©commentcode
;; Standard library for cebf
;; by ComputerElite 2024
;;
;; The standard library contains macros which are useful for writing programs in cebfğŸ’©
;; The compiler automatically reserves space for the standard library and you won't have to worry about overwriting any of it's variables when using itğŸ’©
;; Function to calculate the power of a number
;; mathğŸ’©power ğŸ’©base_value_addressğŸ’© ğŸ’©power_value_addressğŸ’© ğŸ’©result_addressğŸ’©
;;macro math.power 3
;;set.n $2 1
;;cpy $1 $cebf_stdlib_1
;;:cebf_stdlib_math_power__loop
;;jmp.ez $cebf_stdlib_1 cebf_stdlib_math_power__end
;;mpl $0 $2 $2
;;dec $cebf_stdlib_1
;;jmp cebf_stdlib_math_power__loop
;;:cebf_stdlib_math_power__end
;;macroend
;; From https://esolangsğŸ’©org/wiki/brainfuck_algorithmsğŸ’©Modulo
;; Computes the result of a modulo operation
;; mathğŸ’©modulo ğŸ’©divident_addressğŸ’© ğŸ’©divisor_addressğŸ’© ğŸ’©result_addressğŸ’©
;;macro math.modulo 3
;;cpy $0 $cebf_compiler_1
;;cpy $1 $cebf_compiler_2
;;raw $cebf_compiler_0 [-]>>>[-]>[-]>[-]<<<<[>->+<[>]>[<+>-]<<[<]>-]<
;;cpy $cebf_compiler_3 $2
;;macroend
;; From https://esolangsğŸ’©org/wiki/brainfuck_algorithms
;; Computes the result of a division with remainder
;; mathğŸ’©divide_without_remainder ğŸ’©divident_addressğŸ’© ğŸ’©divisor_addressğŸ’© ğŸ’©div_result_addressğŸ’© ğŸ’©mod_result_addressğŸ’©
;;macro math.divmod 4
;;cpy $0 $cebf_compiler_0
;;cpy $1 $cebf_compiler_1
;;raw $cebf_compiler_0 >>[-]>[-]<<<[->[->+>>]>[<<+>>[-<+>]>+>>]<<<<<]>[>>>]>[[-<+>]>+>>]<<<<<
;;cpy $cebf_compiler_3 $2
;;cpy $cebf_compiler_2 $3
;;macroend
;; Computes the result of a division
;; mathğŸ’©divide_without_remainder ğŸ’©divident_addressğŸ’© ğŸ’©divisor_addressğŸ’© ğŸ’©result_addressğŸ’©
;;macro math.divide_without_remainder 3
;;cpy $0 $cebf_compiler_0
;;cpy $1 $cebf_compiler_1
;;raw $cebf_compiler_2 [-]>[-]>[-]<<<<[>[->+>+<<]>>[-<<+>>]<[-<<->>]>>+<<<<]>>
;;cpy $cebf_compiler_4 $2
;;macroend
;; Bash library for cebf
;; by ComputerElite 2024
;;
;; The bash library contains macros for interacting with the bash shell
;; Appends a command to the cebf interpreter bash command buffer
;; bashğŸ’©set_command ğŸ’©stringğŸ’©
;;macro bash.set_command 1
;;;; save current interpreter output mode for restoring later
;;cpy $cebf_interpreter_0 $cebf_stdlib_0
;;set.n $cebf_interpreter_0 1
;;wrt.s $0
;;cpy $cebf_stdlib_0 $cebf_interpreter_0
;;macroend
;; Adds a string from cebf to the command buffer
;; bashğŸ’©push_command
;;macro bash.push_command 1
;;cpy $cebf_interpreter_0 $cebf_stdlib_0
;;set.n $cebf_interpreter_0 1
;;out.n $0
;;cpy $cebf_stdlib_0 $cebf_interpreter_0
;;macroend
;; Starts the bash command in the bash buffer of the cebf interpreterğŸ’© out/in streams will be redirected to started command
;; bashğŸ’©start_command_in_buffer
;;macro bash.start_command_in_buffer 0
;;set.n $cebf_interpreter_0 2
;;wrt.n
;;macroend
;; Switches to a specified processğŸ’© Expects raw number as argument
;; bashğŸ’©switch_to_process
;;macro bash.switch_to_process 1
;;set.n $cebf_compiler_0 $0
;;set.n $cebf_interpreter_0 5
;;out.r $cebf_compiler_0
;;set.n $cebf_interpreter_0 0
;;macroend
;; Usage
;; bashğŸ’©switch_to_console
;;macro bash.switch_to_console 0
;;set.n $cebf_interpreter_0 4
;;macroend
;; BorkedğŸ’© please fix!!!
;; Starts a bash process with the given commandğŸ’© The command must be a literal string and not a varableğŸ’© std_in_content_address is a string variable that is written to stdin of the process once it started
;; bashğŸ’©execute_and_print_entire_output ğŸ’©command_as_stringğŸ’© ğŸ’©std_in_content_addressğŸ’©
;;macro bash.execute_with_stdin_and_print_entire_output 2
;;bash.set_command $0
;;bash.start_command_in_buffer
;;;; check if process is running
;;set.n $cebf_interpreter_0 3
;;in.c $cebf_stdlib_1
;;jmp.ez $cebf_stdlib_1 cebf_stdlib_bash_execute_with_stdin_and_print_entire_output__exit
;;set.n $cebf_interpreter_0 0
;;:cebf_stdlib_bash_execute_with_stdin_and_print_entire_output__loop
;;;; read stdout
;;in.c $cebf_stdlib_0
;;jmp.nz $cebf_interpreter_1 cebf_stdlib_bash_execute_with_stdin_and_print_entire_output__exit
;;out.r $cebf_stdlib_0
;;jmp cebf_stdlib_bash_execute_with_stdin_and_print_entire_output__loop
;;:cebf_stdlib_bash_execute_with_stdin_and_print_entire_output__exit
;;macroend
;; KIlls the process running in the cebf interpreter
;; bashğŸ’©kill_process
;;macro bash.kill_process 0
;;set.n $cebf_interpreter_0 3
;;wrt.n
;;macroend
;; Reads stdout of the currently running bash process until the end of streamğŸ’© Output will be null terminated
;; bashğŸ’©read_stdout_to_end ğŸ’©start_addressğŸ’©
;;macro bash.read_stdout_to_end 1
;;set.a $0 $cebf_stdlib_0
;;;; check if process is running
;;set.n $cebf_interpreter_0 3
;;in.c $cebf_stdlib_1
;;jmp.ez $cebf_stdlib_1 cebf_stdlib_bash_read_stdout_to_end__end
;;set.n $cebf_interpreter_0 0
;;:cebf_stdlib_bash_read_stdout_to_end__loop
;;;; read stdout
;;in.c *$cebf_stdlib_0
;;inc $cebf_stdlib_0
;;jmp.nz $cebf_interpreter_1 cebf_stdlib_bash_read_stdout_to_end__exit
;;jmp cebf_stdlib_bash_read_stdout_to_end__loop
;;:cebf_stdlib_bash_read_stdout_to_end__end
;;;; null terminate string
;;set.n *$cebf_stdlib_0 0
;;:cebf_stdlib_bash_read_stdout_to_end__exit
;;macroend
;; Executes a bash command and kills it once the end of the output streağŸ’© was reachedğŸ’© Output stream is discarded
;; bashğŸ’©run_command_and_kill_at_end_of_file ğŸ’©commandğŸ’©
;;macro bash.run_command_and_kill_at_end_of_file 1
;;bash.set_command $0
;;bash.start_command_in_buffer
;;;; check if process is running
;;set.n $cebf_interpreter_0 3
;;in.c $cebf_stdlib_1
;;jmp.ez $cebf_stdlib_1 cebf_stdlib_bash_run_command_and_kill_at_end_of_file__exit
;;set.n $cebf_interpreter_0 0
;;:cebf_stdlib_bash_run_command_and_kill_at_end_of_file__loop
;;;; read stdout
;;in.c $cebf_stdlib_1
;;inc $cebf_stdlib_0
;;jmp.nz $cebf_interpreter_1 cebf_stdlib_bash_run_command_and_kill_at_end_of_file__exit
;;jmp cebf_stdlib_bash_run_command_and_kill_at_end_of_file__loop
;;:cebf_stdlib_bash_run_command_and_kill_at_end_of_file__exit
;;macroend
;; jump if equal
;; jmpğŸ’©eq ğŸ’©addressAğŸ’© ğŸ’©addressBğŸ’© ğŸ’©labelğŸ’©
;;macro jmp.eq 3
;;;; subtract both values from each other
;;sub $0 $1 $cebf_stdlib_0
;;;; if the result is 0ğŸ’© the values are equal and thus we jump
;;jmp.ez $cebf_stdlib_0 $2
;;macroend
;; compare two strings
;; stringğŸ’©compare ğŸ’©addressAğŸ’© ğŸ’©addressBğŸ’© ğŸ’©labelğŸ’©
;;macro string.compare 3
;;;; create pointers to the strings
;;set.a $cebf_stdlib_1 $0
;;set.a $cebf_stdlib_2 $1
;;jmp cebf_stdlib_string_compare_loop
;;;; compare the strings character for character
;;:cebf_stdlib_string_compare_pre_loop
;;;; move to next characters
;;inc $cebf_stdlib_1
;;inc $cebf_stdlib_2
;;:cebf_stdlib_string_compare_loop
;;;; if both characters are equal check what they are
;;jmp.eq *$cebf_stdlib_1 *$cebf_stdlib_2 cebf_stdlib_string_compare_compare_succeeded
;;;; now check if any of the strings are null
;;jmp cebf_stdlib_string_compare_compare_failed
;;:cebf_stdlib_string_compare_compare_succeeded
;;;; if the first string is not nullğŸ’© we haven't reached the end of the string yet
;;jmp.nz *$cebf_stdlib_1 cebf_stdlib_string_compare_pre_loop
;;;; string end reached and they're the sameğŸ’© Nice!!
;;jmp $2
;;:cebf_stdlib_string_compare_compare_failed
;;macroend
;; Stores the length of a string in a variable
;; stringğŸ’©get_length ğŸ’©length_store_addressğŸ’© ğŸ’©string_addressğŸ’©
;;macro string.get_length 2
;;set.n $0 0
;;set.a $cebf_stdlib_0 $1
;;:cebf_stdlib_string_get_length__loop
;;jmp.ez *$cebf_stdlib_0 cebf_stdlib_string_get_length__end
;;inc $0
;;inc $cebf_stdlib_0
;;jmp cebf_stdlib_string_get_length__loop
;;:cebf_stdlib_string_get_length__end
;;macroend
;; Stores the length of a string in a variable
;; stringğŸ’©get_length_new ğŸ’©length_store_addressğŸ’© ğŸ’©string_addressğŸ’©
;;macro string.get_length_new 2
;;set.a $cebf_stdlib_0 $1
;;raw *$cebf_stdlib_0 <[-]>[>+>]<<<[[>>[-<<+>>]]<<<<]+[->>[-<<+>>]<<<<]>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]+>
;;;;raw $cebf_compiler_0 ğŸ’©
;;cpy $cebf_compiler_0 $0
;;macroend
;; Converts a string into an int
;; stringğŸ’©to_int ğŸ’©string_addressğŸ’© ğŸ’©int_store_addressğŸ’©
;;macro string.to_int 2
;;;; get length of string
;;string.get_length $cebf_stdlib_2 $0
;;set.a $cebf_stdlib_3 $0
;;set.n $1 0
;;dec $cebf_stdlib_2
;;add $cebf_stdlib_3 $cebf_stdlib_2 $cebf_stdlib_3 ;; pointer in 3 now points to last char of string aka least significant
;;set.n $cebf_stdlib_5 0 ;; power of 10
;;set.n $cebf_stdlib_6 10 ;; base 10
;;set.n $cebf_stdlib_7 48 ;; ascii to digit conversion magic number
;;:cebf_stdlib_string_to_int__loop
;;jmp.ez $cebf_stdlib_2 cebf_stdlib_string_to_int__end
;;;; instead of writing back to the original address we could just use another stdlib address but I decided to safe addresses hereğŸ’©
;;sub $cebf_stdlib_7 *$cebf_stdlib_3 *$cebf_stdlib_3 ;; convert ascii to digit
;;math.power $cebf_stdlib_6 $cebf_stdlib_5 $cebf_stdlib_4 ;; calculate power of 10
;;mpl $cebf_stdlib_4 *$cebf_stdlib_3 $cebf_stdlib_4 ;; multiply digit with power of 10
;;add *$cebf_stdlib_3 $cebf_stdlib_7 *$cebf_stdlib_3 ;; restore damage we did to original memory cell
;;add $cebf_stdlib_4 $1 $1 ;; add to result
;;dec $cebf_stdlib_3 ;; move to next character
;;dec $cebf_stdlib_2 ;; decrement remaining string length
;;inc $cebf_stdlib_5 ;; increase power of 10
;;jmp cebf_stdlib_string_to_int__loop
;;:cebf_stdlib_string_to_int__end
;;macroend
;; Outputs an int at an address
;; outğŸ’©int ğŸ’©addressğŸ’©
;;macro out.int 1
;;set.n $cebf_stdlib_1 48
;;cpy $0 $cebf_stdlib_0
;;add $cebf_stdlib_1 $cebf_stdlib_0 $cebf_stdlib_0
;;out.r $cebf_stdlib_0
;;macroend
;; Slow pure CEBF implementation for inğŸ’©line
;; inğŸ’©line_slow ğŸ’©addressğŸ’©
;;macro in.line_slow 1
;;all cebf_stdlib_in_line__input_pointer 1
;;all cebf_stdlib_in_line__new_line 1
;;set.a $cebf_stdlib_in_line__input_pointer $0
;;set.n $cebf_stdlib_in_line__new_line 10
;;:cebf_stdlib_in_line__input_loop
;;in.c *$cebf_stdlib_in_line__input_pointer
;;jmp.eq *$cebf_stdlib_in_line__input_pointer $cebf_stdlib_in_line__new_line cebf_stdlib_in_line__done
;;inc $cebf_stdlib_in_line__input_pointer
;;jmp cebf_stdlib_in_line__input_loop
;;:cebf_stdlib_in_line__done
;;fre cebf_stdlib_in_line__input_pointer
;;fre cebf_stdlib_in_line__new_line
;;macroend
;; reads a line into the given addressğŸ’© null terminated
;; inğŸ’©line ğŸ’©addressğŸ’©
;;macro in.line 1
;;raw $0 [-]+[,>[-]>[-]<<[->+>+<<]>[-<+>]+>----------]<[-<<]>
;;macroend
;; Converts n int to a string
;; uint8ğŸ’©to_string ğŸ’©int_addressğŸ’© ğŸ’©string_addressğŸ’©
;;macro uint8.to_string 2
;;all cebf_stdlib_uint8_to_string__tmp_int 1
;;cpy $0 $cebf_stdlib_uint8_to_string__tmp_int
;;all cebf_stdlib_uint8_to_string__current_power_of_ten 1
;;set.n $cebf_stdlib_uint8_to_string__current_power_of_ten 4
;;all cebf_stdlib_uint8_to_string__base 1
;;set.n $cebf_stdlib_uint8_to_string__base 10
;;all cebf_stdlib_uint8_to_string__current_digit_value 1
;;all cebf_stdlib_uint8_to_string__str_pointer 1
;;set.a $cebf_stdlib_uint8_to_string__str_pointer $1
;;all cebf_stdlib_uint8_to_string__forty_eight 1
;;set.n $cebf_stdlib_uint8_to_string__forty_eight 48
;;all cebf_stdlib_uint8_to_string__has_started 1
;;set.n $cebf_stdlib_uint8_to_string__has_started 0
;;:cebf_stdlib_uint8_to_string__skip_leading_zeros
;;jmp.nz $cebf_stdlib_uint8_to_string__has_started cebf_stdlib_uint8_to_string__continue_anyway
;;dec $cebf_stdlib_uint8_to_string__current_power_of_ten
;;:cebf_stdlib_uint8_to_string__loop
;;math.power $cebf_stdlib_uint8_to_string__base $cebf_stdlib_uint8_to_string__current_power_of_ten $cebf_stdlib_uint8_to_string__current_digit_value
;;math.divmod $cebf_stdlib_uint8_to_string__tmp_int $cebf_stdlib_uint8_to_string__current_digit_value $cebf_stdlib_uint8_to_string__current_digit_value $cebf_stdlib_uint8_to_string__tmp_int
;;jmp.ez $cebf_stdlib_uint8_to_string__current_digit_value cebf_stdlib_uint8_to_string__skip_leading_zeros
;;:cebf_stdlib_uint8_to_string__continue_anyway
;;set.n $cebf_stdlib_uint8_to_string__has_started 1
;;add $cebf_stdlib_uint8_to_string__forty_eight $cebf_stdlib_uint8_to_string__current_digit_value $cebf_stdlib_uint8_to_string__current_digit_value
;;cpy $cebf_stdlib_uint8_to_string__current_digit_value *$cebf_stdlib_uint8_to_string__str_pointer
;;inc $cebf_stdlib_uint8_to_string__str_pointer
;;jmp.ez $cebf_stdlib_uint8_to_string__current_power_of_ten cebf_stdlib_uint8_to_string__end
;;dec $cebf_stdlib_uint8_to_string__current_power_of_ten
;;jmp cebf_stdlib_uint8_to_string__loop
;;:cebf_stdlib_uint8_to_string__end
;;fre cebf_stdlib_uint8_to_string__tmp_int
;;fre cebf_stdlib_uint8_to_string__current_power_of_ten
;;fre cebf_stdlib_uint8_to_string__base
;;fre cebf_stdlib_uint8_to_string__current_digit_value
;;fre cebf_stdlib_uint8_to_string__str_pointer
;;fre cebf_stdlib_uint8_to_string__forty_eight
;;macroend
;; Converts n int to a string
;; uint16ğŸ’©to_string ğŸ’©intğŸ’© ğŸ’©string_addressğŸ’©
;;macro uint16.to_string 2
;;all cebf_stdlib_uint16_to_string__tmp_int 1
;;cpy $0 $cebf_stdlib_uint16_to_string__tmp_int
;;all cebf_stdlib_uint16_to_string__current_power_of_ten 1
;;set.n $cebf_stdlib_uint16_to_string__current_power_of_ten 5
;;all cebf_stdlib_uint16_to_string__base 1
;;set.n $cebf_stdlib_uint16_to_string__base 10
;;all cebf_stdlib_uint16_to_string__current_digit_value 1
;;all cebf_stdlib_uint16_to_string__str_pointer 1
;;set.a $cebf_stdlib_uint16_to_string__str_pointer $1
;;all cebf_stdlib_uint16_to_string__forty_eight 1
;;set.n $cebf_stdlib_uint16_to_string__forty_eight 48
;;all cebf_stdlib_uint16_to_string__has_started 1
;;set.n $cebf_stdlib_uint16_to_string__has_started 0
;;:cebf_stdlib_uint16_to_string__skip_leading_zeros
;;jmp.nz $cebf_stdlib_uint16_to_string__has_started cebf_stdlib_uint16_to_string__continue_anyway
;;dec $cebf_stdlib_uint16_to_string__current_power_of_ten
;;:cebf_stdlib_uint16_to_string__loop
;;math.power $cebf_stdlib_uint16_to_string__base $cebf_stdlib_uint16_to_string__current_power_of_ten $cebf_stdlib_uint16_to_string__current_digit_value
;;math.divmod $cebf_stdlib_uint16_to_string__tmp_int $cebf_stdlib_uint16_to_string__current_digit_value $cebf_stdlib_uint16_to_string__current_digit_value $cebf_stdlib_uint16_to_string__tmp_int
;;jmp.ez $cebf_stdlib_uint16_to_string__current_digit_value cebf_stdlib_uint16_to_string__skip_leading_zeros
;;:cebf_stdlib_uint16_to_string__continue_anyway
;;set.n $cebf_stdlib_uint16_to_string__has_started 1
;;add $cebf_stdlib_uint16_to_string__forty_eight $cebf_stdlib_uint16_to_string__current_digit_value $cebf_stdlib_uint16_to_string__current_digit_value
;;cpy $cebf_stdlib_uint16_to_string__current_digit_value *$cebf_stdlib_uint16_to_string__str_pointer
;;inc $cebf_stdlib_uint16_to_string__str_pointer
;;jmp.ez $cebf_stdlib_uint16_to_string__current_power_of_ten cebf_stdlib_uint16_to_string__end
;;dec $cebf_stdlib_uint16_to_string__current_power_of_ten
;;jmp cebf_stdlib_uint16_to_string__loop
;;:cebf_stdlib_uint16_to_string__end
;;fre cebf_stdlib_uint16_to_string__tmp_int
;;fre cebf_stdlib_uint16_to_string__current_power_of_ten
;;fre cebf_stdlib_uint16_to_string__base
;;fre cebf_stdlib_uint16_to_string__current_digit_value
;;fre cebf_stdlib_uint16_to_string__str_pointer
;;fre cebf_stdlib_uint16_to_string__forty_eight
;;macroend
;; Outputs a string at the specified address to the console and then switches back to process outputs
;; output_string_in_console ğŸ’©string_addressğŸ’©
;;macro output_string_in_console 1
;;bash.switch_to_console
;;out.n $0
;;bash.switch_to_process 0
;;macroend
;; Sends a file via http
;; httpğŸ’©send_file ğŸ’©file_pathğŸ’©
;;macro http.send_file 1
;;bash.switch_to_process 0
;;wrt.s "HTTP/1.1 200 OK"
;;wrt.s "\r\n"
;;wrt.s "Server: brainfuck\r\n"
;;wrt.s "Content-Length: "
;;bash.switch_to_process 1
;;bash.set_command "du -b "
;;bash.set_command $0
;;bash.set_command "| cut -f1 | tr -d '\n'"
;;bash.start_command_in_buffer
;;bash.read_stdout_to_end $content_length
;;bash.kill_process
;;bash.switch_to_process 0
;;out.n $content_length
;;wrt.s "\r\nConnection: close\r\n"
;;wrt.s "Content-Type: text/plain\r\n"
;;wrt.s "\r\n"
;;;; Send the response body
;;bash.switch_to_process 1
;;bash.set_command "cat "
;;bash.set_command $0
;;bash.start_command_in_buffer
;;raw $cebf_interpreter_0 [-]>[-]>[-]+[<<+++++>[-]+.-<----->>,<<+++++>[-].<----->>.+]<<
;;bash.switch_to_process 0
;;macroend
;; response_code is a directly passed stringğŸ’© response body a address
;; httpğŸ’©send_response ğŸ’©response_codeğŸ’© ğŸ’©response_bodyğŸ’©
;;macro http.send_response 2
;;bash.switch_to_process 0
;;;; Send the response code
;;wrt.s "HTTP/1.1 "
;;out.n $0
;;wrt.s "\r\n"
;;wrt.s "Server: brainfuck\r\n"
;;string.get_length_new $content_length $1
;;wrt.s "Content-Length: "
;;uint8.to_string $content_length $content_length
;;out.n $content_length
;;wrt.s "\r\nConnection: close\r\n"
;;wrt.s "Content-Type: text/plain\r\n"
;;wrt.s "\r\n"
;;;; Send the response body
;;out.n $body
;;all empty_line 2
;;;;
;;macroend
all content_length 6
;; Connect with a netcat server
:handle_new_connection
;; Here we recreate the netcat process to accept new requests
set.n $cebf_compiler_0 0
set.n $cebf_interpreter_0 5
out.r $cebf_compiler_0
set.n $cebf_interpreter_0 0
set.n $cebf_interpreter_0 3
wrt.n

cpy $cebf_interpreter_0 $cebf_stdlib_0
set.n $cebf_interpreter_0 1
wrt.s "nc -lvnp 5000"
cpy $cebf_stdlib_0 $cebf_interpreter_0
;;bashğŸ’©set_command "cat ğŸ’©ğŸ’© responseğŸ’©txt"
set.n $cebf_interpreter_0 2
wrt.n
set.n $cebf_interpreter_0 4
wrt.s "Started netcat listener on port 5000\n"
set.n $cebf_compiler_0 0
set.n $cebf_interpreter_0 5
out.r $cebf_compiler_0
set.n $cebf_interpreter_0 0
all http_header 44
all http_method 6
all http_path 32
all read_pointer 1
all write_pointer 1
all space 1
all body 64
all status_code 7
all path_check 32
set.s $status_code "200 OK"
set.n $space 32
set.a $write_pointer $http_method
set.a $read_pointer $http_header
raw $http_header [-]+[,>[-]>[-]<<[->+>+<<]>[-<+>]+>----------]<[-<<]>
set.n $cebf_interpreter_0 4
;; Read first line and extract method and path
;; Consume the next character from the read pointer and copies it to the write pointer until space is hit
;; consume_until_space
;;macro consume_until_space 0
;;:consume_until_space__loop
;;jmp.eq *$read_pointer $space consume_until_space__end
;;cpy *$read_pointer *$write_pointer
;;inc $read_pointer
;;inc $write_pointer
;;jmp consume_until_space__loop
;;:consume_until_space__end
;;macroend
:consume_until_space__loop___call_0

sub *$read_pointer $space $cebf_stdlib_0

jmp.ez $cebf_stdlib_0 consume_until_space__end___call_0
cpy *$read_pointer *$write_pointer
inc $read_pointer
inc $write_pointer
jmp consume_until_space__loop___call_0
:consume_until_space__end___call_0
inc $read_pointer
set.a $write_pointer $http_path
:consume_until_space__loop___call_1

sub *$read_pointer $space $cebf_stdlib_0

jmp.ez $cebf_stdlib_0 consume_until_space__end___call_1
cpy *$read_pointer *$write_pointer
inc $read_pointer
inc $write_pointer
jmp consume_until_space__loop___call_1
:consume_until_space__end___call_1
out.n $http_method
wrt.s \n
out.n $http_path
wrt.s \n
set.s $path_check /file

set.a $cebf_stdlib_1 $http_path
set.a $cebf_stdlib_2 $path_check
jmp cebf_stdlib_string_compare_loop___call_0

:cebf_stdlib_string_compare_pre_loop___call_0

inc $cebf_stdlib_1
inc $cebf_stdlib_2
:cebf_stdlib_string_compare_loop___call_0


sub *$cebf_stdlib_1 *$cebf_stdlib_2 $cebf_stdlib_0

jmp.ez $cebf_stdlib_0 cebf_stdlib_string_compare_compare_succeeded___call_0

jmp cebf_stdlib_string_compare_compare_failed___call_0
:cebf_stdlib_string_compare_compare_succeeded___call_0

jmp.nz *$cebf_stdlib_1 cebf_stdlib_string_compare_pre_loop___call_0

jmp handle_file
:cebf_stdlib_string_compare_compare_failed___call_0
set.s $path_check /hello

set.a $cebf_stdlib_1 $http_path
set.a $cebf_stdlib_2 $path_check
jmp cebf_stdlib_string_compare_loop___call_1

:cebf_stdlib_string_compare_pre_loop___call_1

inc $cebf_stdlib_1
inc $cebf_stdlib_2
:cebf_stdlib_string_compare_loop___call_1


sub *$cebf_stdlib_1 *$cebf_stdlib_2 $cebf_stdlib_0

jmp.ez $cebf_stdlib_0 cebf_stdlib_string_compare_compare_succeeded___call_1

jmp cebf_stdlib_string_compare_compare_failed___call_1
:cebf_stdlib_string_compare_compare_succeeded___call_1

jmp.nz *$cebf_stdlib_1 cebf_stdlib_string_compare_pre_loop___call_1

jmp handle_hello
:cebf_stdlib_string_compare_compare_failed___call_1
set.s $path_check /bye

set.a $cebf_stdlib_1 $http_path
set.a $cebf_stdlib_2 $path_check
jmp cebf_stdlib_string_compare_loop___call_2

:cebf_stdlib_string_compare_pre_loop___call_2

inc $cebf_stdlib_1
inc $cebf_stdlib_2
:cebf_stdlib_string_compare_loop___call_2


sub *$cebf_stdlib_1 *$cebf_stdlib_2 $cebf_stdlib_0

jmp.ez $cebf_stdlib_0 cebf_stdlib_string_compare_compare_succeeded___call_2

jmp cebf_stdlib_string_compare_compare_failed___call_2
:cebf_stdlib_string_compare_compare_succeeded___call_2

jmp.nz *$cebf_stdlib_1 cebf_stdlib_string_compare_pre_loop___call_2

jmp handle_bye
:cebf_stdlib_string_compare_compare_failed___call_2
jmp handle_default
:handle_default
set.s $body "404 - Not found"
set.s $status_code 404
jmp send_body
:handle_hello
set.s $body "Hello, World!"
set.s $status_code "200 OK"
jmp send_body
:handle_bye
set.s $body "Goodbye, World!"
set.s $status_code "200 OK"
jmp send_body
:handle_file
set.n $cebf_compiler_0 0
set.n $cebf_interpreter_0 5
out.r $cebf_compiler_0
set.n $cebf_interpreter_0 0
wrt.s "HTTP/1.1 200 OK"
wrt.s "\r\n
wrt.s "Server: brainfuck\r\n"
wrt.s "Content-Length: "
set.n $cebf_compiler_0 1
set.n $cebf_interpreter_0 5
out.r $cebf_compiler_0
set.n $cebf_interpreter_0 0

cpy $cebf_interpreter_0 $cebf_stdlib_0
set.n $cebf_interpreter_0 1
wrt.s "du -b "
cpy $cebf_stdlib_0 $cebf_interpreter_0

cpy $cebf_interpreter_0 $cebf_stdlib_0
set.n $cebf_interpreter_0 1
wrt.s ~/rider/BrainfuckInterpreter/response.txt
cpy $cebf_stdlib_0 $cebf_interpreter_0

cpy $cebf_interpreter_0 $cebf_stdlib_0
set.n $cebf_interpreter_0 1
wrt.s "| cut -f1 | tr -d '\n'"
cpy $cebf_stdlib_0 $cebf_interpreter_0
set.n $cebf_interpreter_0 2
wrt.n
set.a $content_length $cebf_stdlib_0

set.n $cebf_interpreter_0 3
in.c $cebf_stdlib_1
jmp.ez $cebf_stdlib_1 cebf_stdlib_bash_read_stdout_to_end__end___call_0
set.n $cebf_interpreter_0 0
:cebf_stdlib_bash_read_stdout_to_end__loop___call_0

in.c *$cebf_stdlib_0
inc $cebf_stdlib_0
jmp.nz $cebf_interpreter_1 cebf_stdlib_bash_read_stdout_to_end__exit___call_0
jmp cebf_stdlib_bash_read_stdout_to_end__loop___call_0
:cebf_stdlib_bash_read_stdout_to_end__end___call_0

set.n *$cebf_stdlib_0 0
:cebf_stdlib_bash_read_stdout_to_end__exit___call_0
set.n $cebf_interpreter_0 3
wrt.n
set.n $cebf_compiler_0 0
set.n $cebf_interpreter_0 5
out.r $cebf_compiler_0
set.n $cebf_interpreter_0 0
out.n $content_length
wrt.s "\r\nConnection: close\r\n"
wrt.s "Content-Type: text/plain\r\n"
wrt.s "\r\n

set.n $cebf_compiler_0 1
set.n $cebf_interpreter_0 5
out.r $cebf_compiler_0
set.n $cebf_interpreter_0 0

cpy $cebf_interpreter_0 $cebf_stdlib_0
set.n $cebf_interpreter_0 1
wrt.s "cat "
cpy $cebf_stdlib_0 $cebf_interpreter_0

cpy $cebf_interpreter_0 $cebf_stdlib_0
set.n $cebf_interpreter_0 1
wrt.s ~/rider/BrainfuckInterpreter/response.txt
cpy $cebf_stdlib_0 $cebf_interpreter_0
set.n $cebf_interpreter_0 2
wrt.n
raw $cebf_interpreter_0 [-]>[-]>[-]+[<<+++++>[-]+.-<----->>,<<+++++>[-].<----->>.+]<<
set.n $cebf_compiler_0 0
set.n $cebf_interpreter_0 5
out.r $cebf_compiler_0
set.n $cebf_interpreter_0 0
jmp handle_new_connection
:send_body
set.n $cebf_compiler_0 0
set.n $cebf_interpreter_0 5
out.r $cebf_compiler_0
set.n $cebf_interpreter_0 0

wrt.s "HTTP/1.1 "
out.n $status_code
wrt.s "\r\n
wrt.s "Server: brainfuck\r\n"
set.a $cebf_stdlib_0 $body
raw *$cebf_stdlib_0 <[-]>[>+>]<<<[[>>[-<<+>>]]<<<<]+[->>[-<<+>>]<<<<]>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]+>

cpy $cebf_compiler_0 $content_length
wrt.s "Content-Length: "
all cebf_stdlib_uint8_to_string__tmp_int___call_0 1
cpy $content_length $cebf_stdlib_uint8_to_string__tmp_int___call_0
all cebf_stdlib_uint8_to_string__current_power_of_ten___call_0 1
set.n $cebf_stdlib_uint8_to_string__current_power_of_ten___call_0 4
all cebf_stdlib_uint8_to_string__base___call_0 1
set.n $cebf_stdlib_uint8_to_string__base___call_0 10
all cebf_stdlib_uint8_to_string__current_digit_value___call_0 1
all cebf_stdlib_uint8_to_string__str_pointer___call_0 1
set.a $cebf_stdlib_uint8_to_string__str_pointer___call_0 $content_length
all cebf_stdlib_uint8_to_string__forty_eight___call_0 1
set.n $cebf_stdlib_uint8_to_string__forty_eight___call_0 48
all cebf_stdlib_uint8_to_string__has_started___call_0 1
set.n $cebf_stdlib_uint8_to_string__has_started___call_0 0
:cebf_stdlib_uint8_to_string__skip_leading_zeros___call_0
jmp.nz $cebf_stdlib_uint8_to_string__has_started___call_0 cebf_stdlib_uint8_to_string__continue_anyway___call_0
dec $cebf_stdlib_uint8_to_string__current_power_of_ten___call_0
:cebf_stdlib_uint8_to_string__loop___call_0
set.n $cebf_stdlib_uint8_to_string__current_digit_value___call_0 1
cpy $cebf_stdlib_uint8_to_string__current_power_of_ten___call_0 $cebf_stdlib_1
:cebf_stdlib_math_power__loop___call_0
jmp.ez $cebf_stdlib_1 cebf_stdlib_math_power__end___call_0
mpl $cebf_stdlib_uint8_to_string__base___call_0 $cebf_stdlib_uint8_to_string__current_digit_value___call_0 $cebf_stdlib_uint8_to_string__current_digit_value___call_0
dec $cebf_stdlib_1
jmp cebf_stdlib_math_power__loop___call_0
:cebf_stdlib_math_power__end___call_0
cpy $cebf_stdlib_uint8_to_string__tmp_int___call_0 $cebf_compiler_0
cpy $cebf_stdlib_uint8_to_string__current_digit_value___call_0 $cebf_compiler_1
raw $cebf_compiler_0 >>[-]>[-]<<<[->[->+>>]>[<<+>>[-<+>]>+>>]<<<<<]>[>>>]>[[-<+>]>+>>]<<<<<
cpy $cebf_compiler_3 $cebf_stdlib_uint8_to_string__current_digit_value___call_0
cpy $cebf_compiler_2 $cebf_stdlib_uint8_to_string__tmp_int___call_0
jmp.ez $cebf_stdlib_uint8_to_string__current_digit_value___call_0 cebf_stdlib_uint8_to_string__skip_leading_zeros___call_0
:cebf_stdlib_uint8_to_string__continue_anyway___call_0
set.n $cebf_stdlib_uint8_to_string__has_started___call_0 1
add $cebf_stdlib_uint8_to_string__forty_eight___call_0 $cebf_stdlib_uint8_to_string__current_digit_value___call_0 $cebf_stdlib_uint8_to_string__current_digit_value___call_0
cpy $cebf_stdlib_uint8_to_string__current_digit_value___call_0 *$cebf_stdlib_uint8_to_string__str_pointer___call_0
inc $cebf_stdlib_uint8_to_string__str_pointer___call_0
jmp.ez $cebf_stdlib_uint8_to_string__current_power_of_ten___call_0 cebf_stdlib_uint8_to_string__end___call_0
dec $cebf_stdlib_uint8_to_string__current_power_of_ten___call_0
jmp cebf_stdlib_uint8_to_string__loop___call_0
:cebf_stdlib_uint8_to_string__end___call_0
fre cebf_stdlib_uint8_to_string__tmp_int___call_0
fre cebf_stdlib_uint8_to_string__current_power_of_ten___call_0
fre cebf_stdlib_uint8_to_string__base___call_0
fre cebf_stdlib_uint8_to_string__current_digit_value___call_0
fre cebf_stdlib_uint8_to_string__str_pointer___call_0
fre cebf_stdlib_uint8_to_string__forty_eight___call_0
out.n $content_length
wrt.s "\r\nConnection: close\r\n"
wrt.s "Content-Type: text/plain\r\n"
wrt.s "\r\n

out.n $body
all empty_line___call_0 2
